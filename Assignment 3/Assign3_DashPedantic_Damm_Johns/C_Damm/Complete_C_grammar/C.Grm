%
% C Tutorials 4 grammar
%
include "C.keys"
include "C.compounds"

% Adds #include to [id] non terminal via regex expression
tokens
	id	|	"\#\i+"
end tokens

%
% Process #include statements
%
define preprocessor
	'#include<[stringlit]> [NL] |
	'#include < [SPOFF] [filepath] > [SPON] [NL]
end define

define filepath
	[fileID] [repeat slash_fileID]
end define

define fileID
	[id] |
	[key]
end define

define slash_fileID
	[slash] [fileID]
end define

define slash
	'/ | '\ | '. | ':
end define


%
% Process functions
%
define functionHeader
	[primitives] [id][SPOFF]'([list params]')[SPON] [NL] |
	[primitives] [id]'(') [NL]
end define

define functionBody
	'{ [NL] [repeat LOC] '}
end define

define LOC
	[IN] [repeat comment_c] [EX] |
	[IN] [functionCalls] [repeat comment_c] [NL] [EX] |
	[IN] [variableDecl] [repeat comment_c] [NL] [EX] |
	[IN] [assignment] [repeat comment_c] [NL] [EX] |
	[IN] [conditional] [repeat comment_c] [EX] |
	[IN] [switch_statement] [repeat comment_c] [EX] |
	[IN] [for_loop] [repeat comment_c] [EX] |
	[IN] [while_loop] [repeat comment_c] [EX] |
	[IN] [do_loop] [repeat comment_c] [EX] |
	[IN] [key]'; [repeat comment_c] [NL] [EX] |
	[IN] [return_statement] [repeat comment_c] [NL] [EX]
end define

define return_statement
	'return [id]'; |
	'return [number]'; |
	'return [stringlit]'; 
end define

define functionFull
	[functionHeader] [functionBody]
end define

define params
	[primitives] [id]
end define

define functionCalls
	printf[SPOFF]([stringlit][opt printops])[SPON]'; |
	scanf[SPOFF]([stringlit][opt printops])[SPON]';
end define

define printops
	,[SP][memops][value] |
	,[stringlit]
end define


%
% Process core variables
%
define variableDecl
	[varSignage] [primitives] [list id] '; |
	[varSignage] [varMod] [primitives] [list id] '; |
	[varSignage] [varMod] [primitives] [list id] '= [value] ';
end define

define value
	[id] |
	[number] |
	[charlit] |
	[number][SPOFF][id][SPON]
end define

define varMod
	const |
	[empty]
end define

define varSignage
	signed |
	unsigned |
	[empty]
end define


%
% ASSIGNMENT
%
define assignment
	[id] [ops] [expression] |
	[opt id][SPOFF][ops][SPON][opt ';]
end define

define expression
	[value] '; |
	[id] [ops] [value]'; |
	[value] [ops] [id]';
end define


%
% IF STATEMENTS
%
define conditional
	[basic_if]
end define

define basic_if
	[ifops] '([if_expression]') [if_body] |
	'else [if_body]
end define

define if_expression
	[rel_exp] |
	[bool_exp] |
	[rel_exp] [booleanops] [rel_exp] |
	[bool_exp] [booleanops] [bool_exp]
end define

define rel_exp
	[opt relationops] [opt '(] [value] [relationops] [value] [opt ')]
end define

define bool_exp
	[opt relationops][opt '(][value] [booleanops] [value] [opt ')]
end define

define if_body
	[braces] [NL] [repeat LOC] [braces] |
	[NL] [LOC]
end define

define ifops
	if |
	else if
end define


%
% SWITCH STATEMENT
%
define switch_statement
	switch'([id]') [braces] [IN] [repeat case_statement] [EX] [IN] default [SPOFF]':[SPON] [NL] [repeat LOC] [EX]  [braces]
end define

define case_statement
	[NL] case [value][SPOFF]':[SPON] [NL]  [repeat LOC] [IN] break'; [NL] [EX]
end define

%
% FOR LOOP
%

define for_loop
	for '( [for_exp] ') [NL] [LOC] |
	for '( [for_exp] ') [braces] [NL] [repeat LOC] [braces]
end define

define for_exp
	[opt primitives] [opt id] [opt '= ] [opt value] '; [opt rel_exp] '; [opt assignment]
end define

define while_loop
	while '( [while_exp] ') [NL] [LOC] |
	while '( [while_exp] ') [braces] [NL] [repeat LOC] [braces]
end define

define while_exp
	[rel_exp] |
	[bool_exp] |
	[value]
end define

define do_loop
	do [braces] [NL] [repeat LOC] [braces] while'([while_exp]')';[NL]
end define


%
% Comments
%
define comment_c
	'/* [repeat comment_string] '*/ [NL] |
	'// [repeat comment_string] [NL]
end define

define comment_string
	[repeat id] |
	[repeat stringlit] |
	[repeat number] |
	', |
	'. |
	': |
	'/
end define


%
% EXTRAS
%
define primitives
	int |
	float |
	char |
	double |
	short |
	long |
	void
end define

define ops
	'+ |
	'- |
	'* |
	'/ |
	'\ |
	'% |
	'+= |
	'*= |
	'-= |
	'/= |
	'++ |
	'= 
end define

define memops
	'& |
	[empty]
end define

define relationops
	'> |
	'< |
	'<= |
	'>= |
	'!	
end define

define booleanops
	'|| |
	'&& |
	'== |
	'!=	
end define

define braces
	[NL] '{ |
	'} [NL]
end define



