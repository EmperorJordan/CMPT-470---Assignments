%
% C Tutorials 3 grammar
%
include "C.keys"
include "C.compounds"


% Adds #include to [id] non terminal via regex expression
tokens
	id	|	"\#\i+"
end tokens

%
% Process #include statements
%
define preprocessor
	'#include<[stringlit]> [NL] |
	'#include < [SPOFF] [filepath] > [SPON] [NL]
end define

define filepath
	[fileID] [repeat slash_fileID]
end define

define fileID
	[id] |
	[key]
end define

define slash_fileID
	[slash] [fileID]
end define

define slash
	'/ | '\ | '. | ':
end define


%
% Process functions
%
define functionHeader
	[primitives] [id][SPOFF]'([list params]')[SPON] [NL] |
	[primitives] [id]'(') [NL]
end define

define functionBody
	'{ [NL] [repeat LOC] '}
end define

define LOC
	[IN] [functionCalls] [NL] [EX] |
	[IN] [variableDecl] [NL] [EX] |
	[IN] [assignment] [NL] [EX] |
	[IN] [conditional] [EX] |
	[IN] [switch_statement] [EX] |
	[IN] [return_statement] [NL] [EX]
end define

define return_statement
	'return [id]'; |
	'return [number]'; |
	'return [stringlit]'; 
end define

define functionFull
	[functionHeader] [functionBody]
end define

define params
	[primitives] [id]
end define

define functionCalls
	printf[SPOFF]([stringlit][opt printops])[SPON]'; |
	scanf[SPOFF]([stringlit][opt printops])[SPON]';
end define

define printops
	,[SP][memops][value]
end define


%
% Process core variables
%
define variableDecl
	[varSignage] [primitives] [list id] '; |
	[varSignage] [varMod] [primitives] [list id] '; |
	[varSignage] [varMod] [primitives] [list id] '= [value] ';
end define

define value
	[id] |
	[number] |
	[charlit] |
	[number][SPOFF][id][SPON]
end define

define varMod
	const |
	[empty]
end define

define varSignage
	signed |
	unsigned |
	[empty]
end define


%
% ASSIGNMENT
%
define assignment
	[id] [ops] [expression]
end define

define expression
	[value] '; |
	[id] [ops] [value]'; |
	[value] [ops] [id]';
end define


%
% IF STATEMENTS
%
define conditional
	[basic_if]
end define

define basic_if
	[ifops] '([if_expression]') [if_body] |
	'else [if_body]
end define

define if_expression
	[rel_exp] |
	[bool_exp] |
	[rel_exp] [booleanops] [rel_exp] |
	[bool_exp] [booleanops] [bool_exp]
end define

define rel_exp
	[opt relationops] [opt '(] [value] [relationops] [value] [opt ')]
end define

define bool_exp
	[opt relationops][opt '(][value] [booleanops] [value] [opt ')]
end define

define if_body
	[braces] [NL] [repeat LOC] [braces] |
	[NL] [LOC]
end define

define ifops
	if |
	else if
end define


%
% SWITCH STATEMENT
%
define switch_statement
	switch'([id]') [braces] [IN] [repeat case_statement] [EX] default ': [repeat LOC] [braces]
end define

define case_statement
	[NL] case [value]': [NL]  [repeat LOC] [IN] break'; [EX]
end define


%
% EXTRAS
%
define primitives
	int |
	float |
	char |
	double |
	short |
	long |
	void
end define

define ops
	'+ |
	'- |
	'* |
	'/ |
	'\ |
	'% |
	'+= |
	'*= |
	'-= |
	'/= |
	'= 
end define

define memops
	'& |
	[empty]
end define

define relationops
	'> |
	'< |
	'<= |
	'>= |
	'!	
end define

define booleanops
	'|| |
	'&& |
	'== |
	'!=	
end define

define braces
	[NL] '{ |
	'} [NL]
end define



